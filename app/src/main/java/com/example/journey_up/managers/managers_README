This package will store the 'ObjectManager' which is in charge of creating, sorting,
and searching for objects.

Objects will be created and sorted during loading time. For sorting, objects will
first be merge sorted into one big array, before being split into many smaller
arrays. The number of smaller arrays is dependant on the spacial magnitude of the
level. The ordering inside each array is dependent on the position of the object's
x and y-axis positions. Having separate searchable arrays is done to implement a
proximity type of search, so that the player's current region is the only area being
searched for player-object collision.

On top of this will be a binary search of the specific region. Order of incrementation
will start from top-left and read left to right before searching down. This is similar
to reading a book.

Here is an example of on-screen objects translated into an array.

******************************************************************************************

display:
        object 1          object 3

                 object 2

        object 5          object 4


array: {object 1, object 3, object 2, object 5, object 4}

******************************************************************************************

Here is a basic idea of the ObjectManager class:

ex: Class ObjectManager<T>
    {
        ArrayList arrayList;
        ObjectManager<T>(int left, int top, int right, int bottom)
        {
            //create object
            //store object into static array
        }

        draw(Canvas canvas)
        {
            //perform linear search
            //draw arrayList[i]
        }

        sort(int size)
        {
            //perform a merge sort

            /*
            split the big array into a number of smaller arrays,
            where the magnitude of smaller arrays is dependant on
            the magnitude of size.
            */
        }

        search(Player player)
        {
            /*
            run if-statements or switch statements to determine which
            region the player is in, to determine which array of objects
            to search.
            */

            /*
            perform binary search which compares player x-y coordinate
            with x-y coordinate of object in arrayList to determine which
            direction to traverse the array.
            */

            //check for collision

            /*
            if collision is true, then run instructions from the
            respective object class.
            */
        }

        clear()
        {
            //this will clear the arrayList.
        }
    }