This package will store the 'ObjectManager' which is in charge of creating, sorting,
and searching for objects.

Objects will be created and sorted during loading time. For sorting, objects will
first be merge sorted into one big array, before being split into many smaller
arrays. The number of smaller arrays is dependant on the spacial magnitude of the
current in-game level. The ordering inside each array is dependent on the position
of the object's x and y-axis positions. Having separate searchable arrays is done
to implement a proximity type of search, so that the player's current region is the
only area being searched for player-object collision.

On top of this will be a binary search of the specific region. Order of incrementation
will start from top-left and read left to right before searching down. This is similar
to reading a book.

******************************************************************************************

Here is an example of on-screen objects translated into an array.

display:
        object 1          object 3

                 object 2

        object 5          object 4


array: {object 1, object 3, object 2, object 5, object 4}

******************************************************************************************

objectManager will be in charge of sorting all sub-manager arrayLists. sorting thread is
created when objectManager.sort() is called.

ex: Class ObjectManager {
        void sort() {
            PlatformManager.sort();
            ItemManager.sort();
            ...
        }
    }

objectManager will also be in charge of resetting/clearing objects from sub-manager
arrayLists.

ex: Class ObjectManager {
        void reset() {
            PlatformManager.reset();
            InGameTimerThread.cancel();
            ...
        }
    }